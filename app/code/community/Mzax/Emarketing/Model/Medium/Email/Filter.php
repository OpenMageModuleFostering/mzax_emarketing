<?php
/**
 * Mzax Emarketing (www.mzax.de)
 * 
 * NOTICE OF LICENSE
 * 
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this Extension in the file LICENSE.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * 
 * @version     0.4.6
 * @category    Mzax
 * @package     Mzax_Emarketing
 * @author      Jacob Siefer (jacob@mzax.de)
 * @copyright   Copyright (c) 2015 Jacob Siefer
 * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */


/**
 * 
 * 
 *
 * @author Jacob Siefer
 * @license http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 * @version 0.4.6
 */
class Mzax_Emarketing_Model_Medium_Email_Filter
    extends Mage_Widget_Model_Template_Filter
{
    
    /**
     * Simple cache for loaded sales rules by id
     * 
     * @var array
     */
    protected static $_salesRules = array();
    
    
    /**
     * 
     * @var Mzax_Emarketing_Model_SalesRule_ICouponManager
     */
    protected $_couponManager;
    
    
    /**
     * 
     * @var boolean
     */
    protected $_enableVarDirective = true;


    /**
     * Is in preview mode?
     *
     * @var bool
     */
    protected $_isPreview = false;
    
    
    
    /**
     * Set coupon mananger
     * 
     * All coupons generated by this filter will get added
     * to the coupon manager which is responsible for saving them
     * 
     * @param unknown $manager
     * @return Mzax_Emarketing_Model_SalesRule_ICouponManager
     */
    public function setCouponManager(Mzax_Emarketing_Model_SalesRule_ICouponManager $manager)
    {
        $this->_couponManager = $manager;
        return $this;
    }
    
    
    
    
    /**
     * Disable var directive
     * 
     * @param string $flag
     * @return Mzax_Emarketing_Model_Medium_Email_Filter
     */
    public function disableVarDirective($flag = true)
    {
        $this->_enableVarDirective = !$flag;
        return $this;
    }


    /**
     * Flag as preview mode
     *
     * @param string $flag
     * @return Mzax_Emarketing_Model_Medium_Email_Filter
     */
    public function isPreview($flag = true)
    {
        $this->_isPreview = $flag;
        return $this;
    }


    
    /**
     * Var directive with modifiers support
     *
     * @param array $construction
     * @return string
     */
    public function varDirective($construction)
    {
        if($this->_enableVarDirective) {
            return parent::varDirective($construction);
        }
        return $construction[0];
    }
    
    
    
    
    /**
     * Generate widget HTML if template variables are assigned
     *
     * @param array $construction
     * @return string
     */
    public function widgetDirective($construction)
    {
        $construction[2] .= sprintf(' store_id ="%s"', $this->getStoreId());
        return parent::widgetDirective($construction);
    }


    /**
     * Retrieve Block html directive
     *
     * @param array $construction
     * @return string
     */
    public function blockDirective($construction)
    {
        if($this->_isPreview && isset($this->_permissionBlock)) {
            $blockParameters = $this->_getIncludeParameters($construction[2]);
            if (isset($blockParameters['type'])) {
                $type = $blockParameters['type'];

                $msg = Mage::helper('mzax_emarketing')
                    ->__('[BLOCK(%s) is not allowed (Check System -> Permissions -> Block)]', $type);

                if(!$this->_permissionBlock->isTypeAllowed($type)) {
                    return '<pre style="color:red;">' . $msg . '</pre>';
                }
            }
        }
        return parent::blockDirective($construction);
    }

    
    
    
    /**
     * Coupon Directive
     * 
     * Will generated a coupon code on the fly.
     * Syntax: {{coupon rule="5" length="8" prefix="ABC-" dash="4"}}
     *
     * @param array $construction
     * @return string
     */
    public function couponDirective($construction)
    {
        // ignore if no coupon manager is defined
        if(!$this->_couponManager) {
            return $construction[0];
        }
        
        // requires version 1.6 of sales rule (magento 1.7)
        if(version_compare(Mage::getConfig()->getModuleConfig('Mage_SalesRule')->version, '1.6.0') < 0) {
            return $construction[0];
        }
        
        $defaults = array(
            'format'  => Mage_SalesRule_Helper_Coupon::COUPON_FORMAT_ALPHANUMERIC,
            'length'  => 8,
            'dash'    => false,
            'suffic'  => '',
            'prefix'  => '',
            'delimer' => '-'
        );
        $params = array_merge($defaults, $this->_getIncludeParameters($construction[2]));
        
        /* @var $coupon Mage_SalesRule_Model_Coupon */
        $coupon = Mage::getModel('salesrule/coupon');
        
        
        if(isset($params['rule'])) {
            $rule = self::getSalesRule($params['rule']);
            if(!$rule) {
                throw new Exception("Rule defined for coupon directive ({$params['rule']}) does not exist");
            }
            if ($rule->getCouponType() == $rule::COUPON_TYPE_NO_COUPON) {
                throw new Exception("Rule defined for coupon directive ({$params['rule']}) does not allow coupons");
            }
            if (!$rule->getUseAutoGeneration()) {
                $coupon = $rule->getPrimaryCoupon();
                if($coupon->getId()) {
                    return $coupon->getCode();
                }
                throw new Exception("Rule defined for coupon directive ({$params['rule']}) does not have a coupon defined");
            }
            $coupon->setRuleId($rule->getId());
        }
        else {
            throw new Exception('No rule defined for coupon directive');
        }
        
        
        /* @var $generator Mage_SalesRule_Model_Coupon_Massgenerator */
        $generator = Mage::getSingleton('salesrule/coupon_massgenerator');
        $generator->setData($params);
        
        // allow to increase length if no luck finding one
        $attempts = 0;
        do {
            if(++$attempts >= 4) {
                $attempts = 0;
                $generator->setLength($generator->getLength() + 1);
            }
            $code = $generator->generateCode();
        }
        while($coupon->getResource()->exists($code));
        
        
        $coupon->setCreatedAt(now());
        $coupon->setType(Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED);
        $coupon->setCode($code);
        $coupon->setUsageLimit(1);
        $coupon->setUsagePerCustomer(1);
        $coupon->setExpirationDate($rule->getToDate());
        
        if(isset($params['limit'])) {
            $coupon->setUsageLimit((int) $params['limit']);
        }
        if(isset($params['climit'])) {
            $coupon->setUsagePerCustomer((int) $params['climit']);
        }
        if(isset($params['expire'])) {
            $expr = time() + ($params['expire'] * 3600);
            if($rule->getToDate()) {
                $expr = min($expr, strtotime($rule->getToDate()));
            }
            
            $expr = date('Y-m-d H:i:s', $expr);            
            $coupon->setExpirationDate($expr);
        }
        
        $this->_couponManager->addCoupon($coupon);
        
        return $code;
    }
    
    
    

    /**
     * Retrieve rule by id
     *
     * @return Mage_SalesRule_Model_Rule
     */
    public static function getSalesRule($id)
    {
        if(array_key_exists($id, self::$_salesRules)) {
            return self::$_salesRules[$id];
        }
        
        /* @var $rule Mage_SalesRule_Model_Rule */
        $rule = Mage::getModel('salesrule/rule')->load($id);
        
        if(!$rule->getId()) {
            $rule = null;
        }
        
        return self::$_salesRules[$id] = $rule;
    }
    
    
    
    
    
    
    /**
     * Filter the string as template.
     * Rewrited for logging exceptions
     *
     * @param string $value
     * @return string
     */
    public function filter($value)
    {
        try {
            $value = Varien_Filter_Template::filter($value);
        } 
        catch (Exception $e) {
            throw $e;
            //$value = '';
            //Mage::logException($e);
        }
        return $value;
    }
}
