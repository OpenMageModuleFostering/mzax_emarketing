{"version":"0.2.1","credits":"This template is a derivative of \"[MailChimp Email-Blueprints|https:\/\/github.com\/mailchimp\/Email-Blueprints]\" by [MailChimp|http:\/\/mailchimp.com\/], used under [CC BY|http:\/\/creativecommons.org\/licenses\/by-sa\/3.0\/]. \r\nAltered by Jacob Siefer (mail@jacobsiefer.de) to match the Magento expressions","name":"One Column Base Template","description":"A simple email template original made by MailChimp.","body":"<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD XHTML 1.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" >\r\n\t<head>\r\n        <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/>\r\n        <title>{{var subject}}<\/title>\r\n        <style type=\"text\/css\">\r\n\t\t\t\/* \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ CLIENT-SPECIFIC STYLES \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ *\/\r\n\t\t\t#outlook a{padding:0;} \/* Force Outlook to provide a \"view in browser\" message *\/\r\n\t\t\t.ReadMsgBody{width:100%;} .ExternalClass{width:100%;} \/* Force Hotmail to display emails at full width *\/\r\n\t\t\t.ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {line-height: 100%;} \/* Force Hotmail to display normal line spacing *\/\r\n\t\t\tbody, table, td, p, a, li, blockquote{-webkit-text-size-adjust:100%; -ms-text-size-adjust:100%;} \/* Prevent WebKit and Windows mobile changing default text sizes *\/\r\n\t\t\ttable, td{mso-table-lspace:0pt; mso-table-rspace:0pt;} \/* Remove spacing between tables in Outlook 2007 and up *\/\r\n\t\t\timg{-ms-interpolation-mode:bicubic;} \/* Allow smoother rendering of resized image in Internet Explorer *\/\r\n\r\n\t\t\t\/* \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ RESET STYLES \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ *\/\r\n\t\t\tbody{margin:0; padding:0;}\r\n\t\t\timg{border:0; height:auto; line-height:100%; outline:none; text-decoration:none;}\r\n\t\t\ttable{border-collapse:collapse !important;}\r\n\t\t\tbody, #bodyTable, #bodyCell{height:100% !important; margin:0; padding:0; width:100% !important;}\r\n\r\n\t\t\t\/* \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ TEMPLATE STYLES \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ *\/\r\n\r\n\t\t\t\/* ========== Page Styles ========== *\/\r\n\r\n\t\t\t#bodyCell{padding:20px;}\r\n\t\t\t#templateContainer{width:600px;}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Page\r\n\t\t\t* @section background style\r\n\t\t\t* @tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.\r\n\t\t\t* @theme page\r\n\t\t\t*\/\r\n\t\t\tbody, #bodyTable{\r\n\t\t\t\t\/*@editable*\/ background-color:#DEE0E2;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Page\r\n\t\t\t* @section background style\r\n\t\t\t* @tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.\r\n\t\t\t* @theme page\r\n\t\t\t*\/\r\n\t\t\t#bodyCell{\r\n\t\t\t\t\/*@editable*\/ border-top:4px solid #BBBBBB;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Page\r\n\t\t\t* @section email border\r\n\t\t\t* @tip Set the border for your email.\r\n\t\t\t*\/\r\n\t\t\t#templateContainer{\r\n\t\t\t\t\/*@editable*\/ border:1px solid #BBBBBB;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\/**\r\n\t\t\t * \tasdf asdfasdf asafdsdsaf \r\n\t\t\t * \r\n\t\t\t * \r\n\t\t\t * @tab Page\r\n\t\t\t * @section email border\r\n\t\t\t * @tip Set the border for your email.\r\n\t\t\t * @name My Nice Style\r\n\t\t\t *\/\r\n\t\t\th1.today {\r\n\t\t\t\tcolor:red !important;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\/**\r\n\t\t\t * \tasdf asdfasdf asafdsdsaf \r\n\t\t\t * \r\n\t\t\t * \r\n\t\t\t * @tab Page\r\n\t\t\t * @section email border\r\n\t\t\t * @tip Set the border for your email.\r\n\t\t\t * @name Boss said\r\n\t\t\t * asdfasfdasdfasdf\r\n\t\t\t *\/\r\n\t\t\tp.boss {\r\n\t\t\t\tcolor:blue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Page\r\n\t\t\t* @section heading 1\r\n\t\t\t* @tip Set the styling for all first-level headings in your emails. These should be the largest of your headings.\r\n\t\t\t* @style heading 1\r\n\t\t\t*\/\r\n\t\t\th1{\r\n\t\t\t\t\/*@editable*\/ color:#202020 !important;\r\n\t\t\t\tdisplay:block;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:26px;\r\n\t\t\t\t\/*@editable*\/ font-style:normal;\r\n\t\t\t\t\/*@editable*\/ font-weight:bold;\r\n\t\t\t\t\/*@editable*\/ line-height:100%;\r\n\t\t\t\t\/*@editable*\/ letter-spacing:normal;\r\n\t\t\t\tmargin-top:0;\r\n\t\t\t\tmargin-right:0;\r\n\t\t\t\tmargin-bottom:10px;\r\n\t\t\t\tmargin-left:0;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Page\r\n\t\t\t* @section heading 2\r\n\t\t\t* @tip Set the styling for all second-level headings in your emails.\r\n\t\t\t* @style heading 2\r\n\t\t\t*\/\r\n\t\t\th2{\r\n\t\t\t\t\/*@editable*\/ color:#404040 !important;\r\n\t\t\t\tdisplay:block;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:20px;\r\n\t\t\t\t\/*@editable*\/ font-style:normal;\r\n\t\t\t\t\/*@editable*\/ font-weight:bold;\r\n\t\t\t\t\/*@editable*\/ line-height:100%;\r\n\t\t\t\t\/*@editable*\/ letter-spacing:normal;\r\n\t\t\t\tmargin-top:0;\r\n\t\t\t\tmargin-right:0;\r\n\t\t\t\tmargin-bottom:10px;\r\n\t\t\t\tmargin-left:0;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Page\r\n\t\t\t* @section heading 3\r\n\t\t\t* @tip Set the styling for all third-level headings in your emails.\r\n\t\t\t* @style heading 3\r\n\t\t\t*\/\r\n\t\t\th3{\r\n\t\t\t\t\/*@editable*\/ color:#606060 !important;\r\n\t\t\t\tdisplay:block;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:16px;\r\n\t\t\t\t\/*@editable*\/ font-style:italic;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ line-height:100%;\r\n\t\t\t\t\/*@editable*\/ letter-spacing:normal;\r\n\t\t\t\tmargin-top:0;\r\n\t\t\t\tmargin-right:0;\r\n\t\t\t\tmargin-bottom:10px;\r\n\t\t\t\tmargin-left:0;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Page\r\n\t\t\t* @section heading 4\r\n\t\t\t* @tip Set the styling for all fourth-level headings in your emails. These should be the smallest of your headings.\r\n\t\t\t* @style heading 4\r\n\t\t\t*\/\r\n\t\t\th4{\r\n\t\t\t\t\/*@editable*\/ color:#808080 !important;\r\n\t\t\t\tdisplay:block;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:14px;\r\n\t\t\t\t\/*@editable*\/ font-style:italic;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ line-height:100%;\r\n\t\t\t\t\/*@editable*\/ letter-spacing:normal;\r\n\t\t\t\tmargin-top:0;\r\n\t\t\t\tmargin-right:0;\r\n\t\t\t\tmargin-bottom:10px;\r\n\t\t\t\tmargin-left:0;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/* ========== Header Styles ========== *\/\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Header\r\n\t\t\t* @section preheader style\r\n\t\t\t* @tip Set the background color and bottom border for your email's preheader area.\r\n\t\t\t* @theme header\r\n\t\t\t*\/\r\n\t\t\t#templatePreheader{\r\n\t\t\t\t\/*@editable*\/ background-color:#F4F4F4;\r\n\t\t\t\t\/*@editable*\/ border-bottom:1px solid #CCCCCC;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Header\r\n\t\t\t* @section preheader text\r\n\t\t\t* @tip Set the styling for your email's preheader text. Choose a size and color that is easy to read.\r\n\t\t\t*\/\r\n\t\t\t.preheaderContent{\r\n\t\t\t\t\/*@editable*\/ color:#808080;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:10px;\r\n\t\t\t\t\/*@editable*\/ line-height:125%;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Header\r\n\t\t\t* @section preheader link\r\n\t\t\t* @tip Set the styling for your email's preheader links. Choose a color that helps them stand out from your text.\r\n\t\t\t*\/\r\n\t\t\t.preheaderContent a:link, .preheaderContent a:visited, \/* Yahoo! Mail Override *\/ .preheaderContent a .yshortcuts \/* Yahoo! Mail Override *\/{\r\n\t\t\t\t\/*@editable*\/ color:#606060;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ text-decoration:underline;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Header\r\n\t\t\t* @section header style\r\n\t\t\t* @tip Set the background color and borders for your email's header area.\r\n\t\t\t* @theme header\r\n\t\t\t*\/\r\n\t\t\t#templateHeader{\r\n\t\t\t\t\/*@editable*\/ background-color:#F4F4F4;\r\n\t\t\t\t\/*@editable*\/ border-top:1px solid #FFFFFF;\r\n\t\t\t\t\/*@editable*\/ border-bottom:1px solid #CCCCCC;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Header\r\n\t\t\t* @section header text\r\n\t\t\t* @tip Set the styling for your email's header text. Choose a size and color that is easy to read.\r\n\t\t\t*\/\r\n\t\t\t.headerContent{\r\n\t\t\t\t\/*@editable*\/ color:#505050;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:20px;\r\n\t\t\t\t\/*@editable*\/ font-weight:bold;\r\n\t\t\t\t\/*@editable*\/ line-height:100%;\r\n\t\t\t\t\/*@editable*\/ padding-top:0;\r\n\t\t\t\t\/*@editable*\/ padding-right:0;\r\n\t\t\t\t\/*@editable*\/ padding-bottom:0;\r\n\t\t\t\t\/*@editable*\/ padding-left:0;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t\t\/*@editable*\/ vertical-align:middle;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Header\r\n\t\t\t* @section header link\r\n\t\t\t* @tip Set the styling for your email's header links. Choose a color that helps them stand out from your text.\r\n\t\t\t*\/\r\n\t\t\t.headerContent a:link, .headerContent a:visited, \/* Yahoo! Mail Override *\/ .headerContent a .yshortcuts \/* Yahoo! Mail Override *\/{\r\n\t\t\t\t\/*@editable*\/ color:#EB4102;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ text-decoration:underline;\r\n\t\t\t}\r\n\r\n\t\t\t#headerImage{\r\n\t\t\t\theight:auto;\r\n\t\t\t\tmax-width:600px;\r\n\t\t\t}\r\n\r\n\t\t\t\/* ========== Body Styles ========== *\/\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Body\r\n\t\t\t* @section body style\r\n\t\t\t* @tip Set the background color and borders for your email's body area.\r\n\t\t\t*\/\r\n\t\t\t#templateBody{\r\n\t\t\t\t\/*@editable*\/ background-color:#F4F4F4;\r\n\t\t\t\t\/*@editable*\/ border-top:1px solid #FFFFFF;\r\n\t\t\t\t\/*@editable*\/ border-bottom:1px solid #CCCCCC;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Body\r\n\t\t\t* @section body text\r\n\t\t\t* @tip Set the styling for your email's main content text. Choose a size and color that is easy to read.\r\n\t\t\t* @theme main\r\n\t\t\t*\/\r\n\t\t\t.bodyContent{\r\n\t\t\t\t\/*@editable*\/ color:#505050;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:16px;\r\n\t\t\t\t\/*@editable*\/ line-height:150%;\r\n\t\t\t\tpadding-top:20px;\r\n\t\t\t\tpadding-right:20px;\r\n\t\t\t\tpadding-bottom:20px;\r\n\t\t\t\tpadding-left:20px;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Body\r\n\t\t\t* @section body link\r\n\t\t\t* @tip Set the styling for your email's main content links. Choose a color that helps them stand out from your text.\r\n\t\t\t*\/\r\n\t\t\t.bodyContent a:link, .bodyContent a:visited, \/* Yahoo! Mail Override *\/ .bodyContent a .yshortcuts \/* Yahoo! Mail Override *\/{\r\n\t\t\t\t\/*@editable*\/ color:#EB4102;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ text-decoration:underline;\r\n\t\t\t}\r\n\r\n\t\t\t.bodyContent img{\r\n\t\t\t\tdisplay:inline;\r\n\t\t\t\theight:auto;\r\n\t\t\t\tmax-width:560px;\r\n\t\t\t}\r\n\r\n\t\t\t\/* ========== Column Styles ========== *\/\r\n\r\n\t\t\t.templateColumnContainer{width:260px;}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Columns\r\n\t\t\t* @section column style\r\n\t\t\t* @tip Set the background color and borders for your email's column area.\r\n\t\t\t*\/\r\n\t\t\t#templateColumns{\r\n\t\t\t\t\/*@editable*\/ background-color:#F4F4F4;\r\n\t\t\t\t\/*@editable*\/ border-top:1px solid #FFFFFF;\r\n\t\t\t\t\/*@editable*\/ border-bottom:1px solid #CCCCCC;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Columns\r\n\t\t\t* @section left column text\r\n\t\t\t* @tip Set the styling for your email's left column content text. Choose a size and color that is easy to read.\r\n\t\t\t*\/\r\n\t\t\t.leftColumnContent{\r\n\t\t\t\t\/*@editable*\/ color:#505050;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:14px;\r\n\t\t\t\t\/*@editable*\/ line-height:150%;\r\n\t\t\t\tpadding-top:0;\r\n\t\t\t\tpadding-right:20px;\r\n\t\t\t\tpadding-bottom:20px;\r\n\t\t\t\tpadding-left:20px;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Columns\r\n\t\t\t* @section left column link\r\n\t\t\t* @tip Set the styling for your email's left column content links. Choose a color that helps them stand out from your text.\r\n\t\t\t*\/\r\n\t\t\t.leftColumnContent a:link, .leftColumnContent a:visited, \/* Yahoo! Mail Override *\/ .leftColumnContent a .yshortcuts \/* Yahoo! Mail Override *\/{\r\n\t\t\t\t\/*@editable*\/ color:#EB4102;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ text-decoration:underline;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Columns\r\n\t\t\t* @section right column text\r\n\t\t\t* @tip Set the styling for your email's right column content text. Choose a size and color that is easy to read.\r\n\t\t\t*\/\r\n\t\t\t.rightColumnContent{\r\n\t\t\t\t\/*@editable*\/ color:#505050;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:14px;\r\n\t\t\t\t\/*@editable*\/ line-height:150%;\r\n\t\t\t\tpadding-top:0;\r\n\t\t\t\tpadding-right:20px;\r\n\t\t\t\tpadding-bottom:20px;\r\n\t\t\t\tpadding-left:20px;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Columns\r\n\t\t\t* @section right column link\r\n\t\t\t* @tip Set the styling for your email's right column content links. Choose a color that helps them stand out from your text.\r\n\t\t\t*\/\r\n\t\t\t.rightColumnContent a:link, .rightColumnContent a:visited, \/* Yahoo! Mail Override *\/ .rightColumnContent a .yshortcuts \/* Yahoo! Mail Override *\/{\r\n\t\t\t\t\/*@editable*\/ color:#EB4102;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ text-decoration:underline;\r\n\t\t\t}\r\n\r\n\t\t\t.leftColumnContent img, .rightColumnContent img{\r\n\t\t\t\tdisplay:inline;\r\n\t\t\t\theight:auto;\r\n\t\t\t\tmax-width:260px;\r\n\t\t\t}\r\n\r\n\t\t\t\/* ========== Footer Styles ========== *\/\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Footer\r\n\t\t\t* @section footer style\r\n\t\t\t* @tip Set the background color and borders for your email's footer area.\r\n\t\t\t* @theme footer\r\n\t\t\t*\/\r\n\t\t\t#templateFooter{\r\n\t\t\t\t\/*@editable*\/ background-color:#F4F4F4;\r\n\t\t\t\t\/*@editable*\/ border-top:1px solid #FFFFFF;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Footer\r\n\t\t\t* @section footer text\r\n\t\t\t* @tip Set the styling for your email's footer text. Choose a size and color that is easy to read.\r\n\t\t\t* @theme footer\r\n\t\t\t*\/\r\n\t\t\t.footerContent{\r\n\t\t\t\t\/*@editable*\/ color:#808080;\r\n\t\t\t\t\/*@editable*\/ font-family:Helvetica;\r\n\t\t\t\t\/*@editable*\/ font-size:10px;\r\n\t\t\t\t\/*@editable*\/ line-height:150%;\r\n\t\t\t\tpadding-top:20px;\r\n\t\t\t\tpadding-right:20px;\r\n\t\t\t\tpadding-bottom:20px;\r\n\t\t\t\tpadding-left:20px;\r\n\t\t\t\t\/*@editable*\/ text-align:left;\r\n\t\t\t}\r\n\r\n\t\t\t\/**\r\n\t\t\t* @tab Footer\r\n\t\t\t* @section footer link\r\n\t\t\t* @tip Set the styling for your email's footer links. Choose a color that helps them stand out from your text.\r\n\t\t\t*\/\r\n\t\t\t.footerContent a:link, .footerContent a:visited, \/* Yahoo! Mail Override *\/ .footerContent a .yshortcuts, .footerContent a span \/* Yahoo! Mail Override *\/{\r\n\t\t\t\t\/*@editable*\/ color:#606060;\r\n\t\t\t\t\/*@editable*\/ font-weight:normal;\r\n\t\t\t\t\/*@editable*\/ text-decoration:underline;\r\n\t\t\t}\r\n\r\n\t\t\t\/* \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ MOBILE STYLES \/\\\/\\\/\\\/\\\/\\\/\\\/\\\/\\\/ *\/\r\n\r\n            @media only screen and (max-width: 480px){\r\n\t\t\t\t\/* \/\\\/\\\/\\\/\\\/\\\/\\\/ CLIENT-SPECIFIC MOBILE STYLES \/\\\/\\\/\\\/\\\/\\\/\\\/ *\/\r\n\t\t\t\tbody, table, td, p, a, li, blockquote{-webkit-text-size-adjust:none !important;} \/* Prevent Webkit platforms from changing default text sizes *\/\r\n                body{width:100% !important; min-width:100% !important;} \/* Prevent iOS Mail from adding padding to the body *\/\r\n\r\n\t\t\t\t\/* \/\\\/\\\/\\\/\\\/\\\/\\\/ MOBILE RESET STYLES \/\\\/\\\/\\\/\\\/\\\/\\\/ *\/\r\n\t\t\t\t#bodyCell{padding:10px !important;}\r\n\r\n\t\t\t\t\/* \/\\\/\\\/\\\/\\\/\\\/\\\/ MOBILE TEMPLATE STYLES \/\\\/\\\/\\\/\\\/\\\/\\\/ *\/\r\n\r\n\t\t\t\t\/* ======== Page Styles ======== *\/\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section template width\r\n\t\t\t\t* @tip Make the template fluid for portrait or landscape view adaptability. If a fluid layout doesn't work for you, set the width to 300px instead.\r\n\t\t\t\t*\/\r\n\t\t\t\t#templateContainer{\r\n\t\t\t\t\tmax-width:600px !important;\r\n\t\t\t\t\t\/*@editable*\/ width:100% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section heading 1\r\n\t\t\t\t* @tip Make the first-level headings larger in size for better readability on small screens.\r\n\t\t\t\t*\/\r\n\t\t\t\th1{\r\n\t\t\t\t\t\/*@editable*\/ font-size:24px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:100% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section heading 2\r\n\t\t\t\t* @tip Make the second-level headings larger in size for better readability on small screens.\r\n\t\t\t\t*\/\r\n\t\t\t\th2{\r\n\t\t\t\t\t\/*@editable*\/ font-size:20px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:100% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section heading 3\r\n\t\t\t\t* @tip Make the third-level headings larger in size for better readability on small screens.\r\n\t\t\t\t*\/\r\n\t\t\t\th3{\r\n\t\t\t\t\t\/*@editable*\/ font-size:18px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:100% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section heading 4\r\n\t\t\t\t* @tip Make the fourth-level headings larger in size for better readability on small screens.\r\n\t\t\t\t*\/\r\n\t\t\t\th4{\r\n\t\t\t\t\t\/*@editable*\/ font-size:16px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:100% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/* ======== Header Styles ======== *\/\r\n\r\n\t\t\t\t#templatePreheader{display:none !important;} \/* Hide the template preheader to save space *\/\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section header image\r\n\t\t\t\t* @tip Make the main header image fluid for portrait or landscape view adaptability, and set the image's original width as the max-width. If a fluid setting doesn't work, set the image width to half its original size instead.\r\n\t\t\t\t*\/\r\n\t\t\t\t#headerImage{\r\n\t\t\t\t\theight:auto !important;\r\n\t\t\t\t\t\/*@editable*\/ max-width:600px !important;\r\n\t\t\t\t\t\/*@editable*\/ width:100% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section header text\r\n\t\t\t\t* @tip Make the header content text larger in size for better readability on small screens. We recommend a font size of at least 16px.\r\n\t\t\t\t*\/\r\n\t\t\t\t.headerContent{\r\n\t\t\t\t\t\/*@editable*\/ font-size:20px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:125% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/* ======== Body Styles ======== *\/\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section body text\r\n\t\t\t\t* @tip Make the body content text larger in size for better readability on small screens. We recommend a font size of at least 16px.\r\n\t\t\t\t*\/\r\n\t\t\t\t.bodyContent{\r\n\t\t\t\t\t\/*@editable*\/ font-size:18px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:125% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/* ======== Column Styles ======== *\/\r\n\r\n\t\t\t\t.templateColumnContainer{display:block !important; width:100% !important;}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section column image\r\n\t\t\t\t* @tip Make the column image fluid for portrait or landscape view adaptability, and set the image's original width as the max-width. If a fluid setting doesn't work, set the image width to half its original size instead.\r\n\t\t\t\t*\/\r\n\t\t\t\t.columnImage{\r\n\t\t\t\t\theight:auto !important;\r\n\t\t\t\t\t\/*@editable*\/ max-width:480px !important;\r\n\t\t\t\t\t\/*@editable*\/ width:100% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section left column text\r\n\t\t\t\t* @tip Make the left column content text larger in size for better readability on small screens. We recommend a font size of at least 16px.\r\n\t\t\t\t*\/\r\n\t\t\t\t.leftColumnContent{\r\n\t\t\t\t\t\/*@editable*\/ font-size:16px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:125% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section right column text\r\n\t\t\t\t* @tip Make the right column content text larger in size for better readability on small screens. We recommend a font size of at least 16px.\r\n\t\t\t\t*\/\r\n\t\t\t\t.rightColumnContent{\r\n\t\t\t\t\t\/*@editable*\/ font-size:16px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:125% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\/* ======== Footer Styles ======== *\/\r\n\r\n\t\t\t\t\/**\r\n\t\t\t\t* @tab Mobile Styles\r\n\t\t\t\t* @section footer text\r\n\t\t\t\t* @tip Make the body content text larger in size for better readability on small screens.\r\n\t\t\t\t*\/\r\n\t\t\t\t.footerContent{\r\n\t\t\t\t\t\/*@editable*\/ font-size:14px !important;\r\n\t\t\t\t\t\/*@editable*\/ line-height:115% !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.footerContent a{display:block !important;} \/* Place footer social and utility links on their own lines, for easier access *\/\r\n\t\t\t}\r\n\t\t<\/style>\r\n    <\/head>\r\n    <body leftmargin=\"0\" marginwidth=\"0\" topmargin=\"0\" marginheight=\"0\" offset=\"0\">\r\n    \t<center>\r\n        \t<table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"bodyTable\">\r\n            \t<tr>\r\n                \t<td align=\"center\" valign=\"top\" id=\"bodyCell\">\r\n                    \t<!-- BEGIN TEMPLATE \/\/ -->\r\n                    \t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" id=\"templateContainer\">\r\n                        \t<tr>\r\n                            \t<td align=\"center\" valign=\"top\">\r\n                                \t<!-- BEGIN PREHEADER \/\/ -->\r\n                                    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templatePreheader\">\r\n                                        <tr>\r\n                                            <td valign=\"top\" class=\"preheaderContent\" style=\"padding-top:10px; padding-right:20px; padding-bottom:10px; padding-left:20px;\" mage:id=\"short_teaser\" mage:editable=\"yes\">\r\n                                                Use this area to offer a short teaser of your email's content. Text here will show in the preview area of some email clients.\r\n                                            <\/td>\r\n                                            <td valign=\"top\" width=\"180\" class=\"preheaderContent\" style=\"padding-top:10px; padding-right:20px; padding-bottom:10px; padding-left:0;\">\r\n                                                Email not displaying correctly?<br \/><a href=\"{{var url.browser_view}}\" target=\"_blank\">View it in your browser<\/a>.\r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                    <\/table>\r\n                                    <!-- \/\/ END PREHEADER -->\r\n                                <\/td>\r\n                            <\/tr>\r\n                        \t<tr mage:id=\"Header\" mage:removable=\"1\">\r\n                            \t<td align=\"center\" valign=\"top\">\r\n                                \t<!-- BEGIN HEADER \/\/ -->\r\n                                    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templateHeader\">\r\n                                        <tr>\r\n                                            <td valign=\"top\" class=\"headerContent\">\r\n                                            \t<img src=\"http:\/\/lorempixel.com\/600\/200\/\" style=\"max-width:600px;\" id=\"headerImage\" mage:id=\"header_image\" mage:editable=\"1\"  \/>\r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                    <\/table>\r\n                                    <!-- \/\/ END HEADER -->\r\n                                <\/td>\r\n                            <\/tr>\r\n                        \t<tr>\r\n                            \t<td align=\"center\" valign=\"top\">\r\n                                \t<!-- BEGIN BODY \/\/ -->\r\n                                    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templateBody\">\r\n                                        <tr>\r\n                                            <td valign=\"top\" class=\"bodyContent\" mage:id=\"main_content\" mage:editable=\"1\">\r\n                                            \t\r\n                                                <p><strong>Hello {{var customer.name}},<\/strong><br\/>\r\n                                                Lorem dfh dipsum dolor sit amet, consectetur adipiscing elit. \r\n                                                Mau mattis risus vel mauris scelerisque, eget tincidunt nibh fermentum. \r\n                                                Vestibdfgh dfghd fgh fdghulum eleifend arcu sed quam finibus, quis mollis nulla mattis. \r\n                                                Nunc ut commodo arcu. Sed sodales lorem justo, ac elementum urna molestie eu. \r\n                                                Proin placerat, magna vel consectetur dapibus, magna ex vulputate nibh, \r\n                                                sit amet mattis urna est et elit. Vivamus sed lobortis mi.<\/p>\r\n                                               \r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                    <\/table>\r\n                                    <!-- \/\/ END BODY -->\r\n                                <\/td>\r\n                            <\/tr>\r\n                        \t<tr mage:id=\"contentBottom\" mage:removable=\"1\">\r\n                            \t<td align=\"center\" valign=\"top\">\r\n                                \t<!-- BEGIN COLUMNS \/\/ -->\r\n                                    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templateColumns\">\r\n                                    \t<tr mage:repeatable=\"1\" mage:id=\"contentBottomTr\">\r\n                                        \t<td align=\"center\" valign=\"top\" class=\"templateColumnContainer\" style=\"padding-top:20px;\">\r\n                                            \t<table border=\"0\" cellpadding=\"20\" cellspacing=\"0\" width=\"100%\">\r\n                                                \t<tr>\r\n                                                    \t<td class=\"leftColumnContent\">\r\n                                                        \t<img src=\"http:\/\/lorempixel.com\/260\/120\/sports\/\" style=\"max-width:260px;\" class=\"columnImage\" mage:id=\"left_column_image\" mage:editable=\"1\" \/>\r\n                                                        <\/td>\r\n                                                    <\/tr>\r\n                                                    <tr>\r\n                                                    \t<td valign=\"top\" class=\"leftColumnContent\" mage:id=\"left_column_content\" mage:editable=\"1\">\r\n                                                            <h3>Repeatable Content<\/h3>\r\n                                                            <strong>Repeatable sections<\/strong> are noted with plus and minus signs so that you can add and subtract content blocks.\r\n                                                            <br \/>\r\n                                                            <br \/>\r\n                                                            You can get a little fancy; repeat blocks and remove all text to make image galleries, or do the opposite and remove images for text-only blocks.\r\n                                                        <\/td>\r\n                                                    <\/tr>\r\n                                                <\/table>\r\n                                            <\/td>\r\n                                        \t<td align=\"center\" valign=\"top\" class=\"templateColumnContainer\" style=\"padding-top:20px;\">\r\n                                            \t<table border=\"0\" cellpadding=\"20\" cellspacing=\"0\" width=\"100%\">\r\n                                                \t<tr>\r\n                                                    \t<td class=\"rightColumnContent\">\r\n                                                        \t<img src=\"http:\/\/lorempixel.com\/260\/120\/\" style=\"max-width:260px;\" class=\"columnImage\" mage:id=\"right_column_image\" mage:editable=\"1\" \/>\r\n                                                        <\/td>\r\n                                                    <\/tr>\r\n                                                    <tr>\r\n                                                    \t<td valign=\"top\" class=\"rightColumnContent\" mage:id=\"right_column_content\" mage:editable=\"1\">\r\n                                                            <h3>Repeatable Content<\/h3>\r\n                                                            <strong>Repeatable sections<\/strong> are noted with plus and minus signs so that you can add and subtract content blocks.\r\n                                                            <br \/>\r\n                                                            <br \/>\r\n                                                            You can also get a little fancy; repeat blocks and remove all text to make image galleries, or do the opposite and remove images for text-only blocks.\r\n                                                        <\/td>\r\n                                                    <\/tr>\r\n                                                <\/table>\r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                    <\/table>\r\n                                    <!-- \/\/ END COLUMNS -->\r\n                                <\/td>\r\n                            <\/tr>\r\n                        \t<tr mage:id=\"Footer\" mage:removable=\"1\">\r\n                            \t<td align=\"center\" valign=\"top\">\r\n                                \t<!-- BEGIN FOOTER \/\/ -->\r\n                                    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templateFooter\">\r\n                                        <tr>\r\n                                            <td valign=\"top\" class=\"footerContent\">\r\n                                                <a href=\"\">Follow on Twitter<\/a>&nbsp;&nbsp;&nbsp;\r\n                                                <a href=\"\">Friend on Facebook<\/a>&nbsp;&nbsp;&nbsp;\r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                        <tr>\r\n                                            <td valign=\"top\" class=\"footerContent\" style=\"padding-top:0;\">\r\n                                                {{var store.name}}<div style=\"white-space: pre\">{{config path=\"general\/store_information\/address\"}}<\/div>\r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                        <tr>\r\n                                            <td valign=\"top\" class=\"footerContent\" style=\"padding-top:0;\">\r\n                                                <em>Copyright &copy; {{var current_year}} {{var store.name}}, All rights reserved.<\/em>\r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                        <tr mage:id=\"Unsubscribe\" mage:removable=\"1\">\r\n                                            <td valign=\"top\" class=\"footerContent\" style=\"padding-top:0;\">\r\n                                            \t<a href=\"{{var url.unsubscribe}}\">unsubscribe here<\/a>\r\n                                            <\/td>\r\n                                        <\/tr>\r\n                                    <\/table>\r\n                                    <!-- \/\/ END FOOTER -->\r\n                                <\/td>\r\n                            <\/tr>\r\n                        <\/table>\r\n                        <!-- \/\/ END TEMPLATE -->\r\n                    <\/td>\r\n                <\/tr>\r\n            <\/table>\r\n        <\/center>\r\n    <\/body>\r\n<\/html>"}